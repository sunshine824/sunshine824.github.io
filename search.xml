<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[全面理解Javascript闭包和闭包的几种写法]]></title>
    <url>%2F2017%2F08%2F08%2F%E5%85%A8%E9%9D%A2%E7%90%86%E8%A7%A3Javascript%E9%97%AD%E5%8C%85%E5%92%8C%E9%97%AD%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95%2F</url>
    <content type="text"><![CDATA[一、什么是闭包闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。闭包的特点： 1. 作为一个函数变量的一个引用，当函数返回时，其处于激活状态。 2. 一个闭包就是当一个函数返回时，一个没有释放资源的栈区。 简单的说，一个持有外部环境变量的函数就是闭包。 二、闭包的几种写法和用法首先要明白，在JS中一切都是对象，函数是对象的一种。下面先来看一下闭包的5种写法，简单理解一下什么是闭包。后面会具体解释。 1234567891011//第1种写法 function Circle(r) &#123; this.r = r; &#125; Circle.PI = 3.14159; Circle.prototype.area = function() &#123; return Circle.PI * this.r * this.r; &#125; var c = new Circle(1.0); alert(c.area()); 这种写法没什么特别的，只是给函数添加一些属性。 12345678910111213//第2种写法 var Circle = function() &#123; var obj = new Object(); obj.PI = 3.14159; obj.area = function( r ) &#123; return this.PI * r * r; &#125; return obj; &#125; var c = new Circle(); alert( c.area( 1.0 ) ); 这种写法是声明一个变量，将一个函数当作值赋给变量。 12345678//第3种写法 var Circle = new Object(); Circle.PI = 3.14159; Circle.Area = function( r ) &#123; return this.PI * r * r; &#125; alert( Circle.Area( 1.0 ) ); 这种方法最好理解，就是new 一个对象，然后给对象添加属性和方法。 12345678//第4种写法 var Circle=&#123; "PI":3.14159, "area":function(r)&#123; return this.PI * r * r; &#125; &#125;; alert( Circle.area(1.0) ); 这种方法使用较多，也最为方便。var obj = {}就是声明一个空的对象。 1234//第5种写法 var Circle = new Function("this.PI = 3.14159;this.area = function( r ) &#123;return r*r*this.PI;&#125;"); alert( (new Circle()).area(1.0) ); 说实话，这种写法我是没用过，大家可以参考一下。 总的来说，上面几种方法，第2中和第4中较为常见，大家可以根据习惯选择。 上面代码中出现了JS中常用的Prototype，那么Prototype有什么用呢？下面我们来看一下：1234567891011121314151617var dom = function()&#123; &#125;; dom.Show = function()&#123; console.log("Show Message"); &#125;; dom.prototype.Display = function()&#123; console.log("Property Message"); &#125;; dom.Display(); //error:dom.Display is not a function dom.Show(); //Show Message var d = new dom(); d.Display(); //Property Message d.Show(); //error:d.Show is not a function 我们首先声明一个变量，将一个函数赋给他，因为在Javascript中每个函数都有一个Portotype属性，而对象没有。添加两个方法，分别直接添加和添加打破Prototype上面，来看下调用情况。分析结果如下： 1、不使用prototype属性定义的对象方法，是静态方法，只能直接用类名进行调用！另外，此静态方法中无法使用this变量来调用对象其他的属性！ 2、使用prototype属性定义的对象方法，是非静态方法，只有在实例化后才能使用！其方法内部可以this来引用对象自身中的其他属性！ 下面我们再来看一段代码：12345678910var dom = function()&#123; var Name = "Default"; this.Sex = "Boy"; this.success = function()&#123; alert("Success"); &#125;; &#125;; alert(dom.Name); //undefined alert(dom.Sex); //undefined 大家先看看，会显示什么呢？ 答案是两个都显示Undefined,为什么呢？这是由于在Javascript中每个function都会形成一个作用域，而这些变量声明在函数中，所以就处于这个函数的作用域中，外部是无法访问的。要想访问变量，就必须new一个实例出来。12345678910var html = &#123; Name:'Object', Success:function()&#123; this.Say = function()&#123; alert("Hello,world"); &#125;; alert("Obj Success"); &#125; &#125;;console.log(html.Name);//Object 再来看看这种写法，其实这是Javascript的一个”语法糖”，这种写法相当于：12345678var html = new Object();html.Name = 'Object';html.Success = function()&#123; this.Say = function()&#123; alert("Hello,world"); &#125;; alert("Obj Success"); &#125; 变量html是一个对象，不是函数，所以没有Prototype属性，其方法也都是公有方法，html不能被实例化。否则会出现如下错误：但是他可以作为值赋给其它变量，如var o = html; 我们可以这样使用它：12alert(html.Name);html.Success(); 说到这里，完了吗？细心的人会问，怎么访问Success方法中的Say方法呢？是html.Success.Say()吗？当然不是，上面刚说过由于作用域的限制，是访问不到的。所以要用下面的方法访问：123456789var s = new html.Success();s.Say();//还可以写到外面html.Success.prototype.Show = function()&#123; alert("HaHa");&#125;;var s = new html.Success();s.Show(); 关于Javascript作用域的问题，不是一两句能说清楚的，有兴趣的大家可以网上找些资料看看。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Js 闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一道有关于排列组合的算法题]]></title>
    <url>%2F2017%2F07%2F25%2F%E4%B8%80%E9%81%93%E6%9C%89%E5%85%B3%E4%BA%8E%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[一、题目内容废话不多说，先上题目： 有一个 n × m 的网格，左下角为A，右上角为B，规定每次只能走一步，并且方向只能是向上或者向右，求A到B共有多少种走法？(例如一个日字形的格子就是一个2 × 1的网格，共有3种走法)并用Javascript写出程序算法。 大家可以先思考一下怎么做，再去看我的方法。 二、解决方法 这个问题我想了很久，一直在走弯路，其实用一个抽象的数学方法就可以很轻松解决这个问题。 现在你可以把向右移动想象成记录一个数字1，把向上移动抽象成记录一个数字0，并且这些数字是按顺序排列的。 看到这里我相信聪明的小伙伴已经想到了如何解决这个问题。 这个问题可以抽象成n个0和m个1的不同排列的总数。比如2 × 2的网格就是2个0和2个1的所有不同排列的数量，也就是1100，1010，1001，0110，0101，0011。 进而，我们可以把问题抽象成从(m + n)个0中，随意抽取m个0并将它改为1的不同方法数，是不是觉得问题很熟悉，没错！就是高中的排列组合。我先把公式亮出来😏： 1C(m, n + m) = (n + m)!/(m! * n!) 想先复习一下排列组合知识的同学可以先看一下第四节。 三、Javascript代码描述以上的结果用JS的描述，如下：1234567891011function getMethods(n, m) &#123; // 定义一个求阶乘的辅助函数 function factorial(x) &#123; if (x === 0) &#123; return 1 &#125; else &#123; return factorial(x -1) * x &#125; &#125; return factorial(m + n)/(factorial(m) * factorial(n))&#125; 如果小伙伴有好的算法，可以留言交流！ 四、排列组合简单地讲一下排列和组合。 排列先举个栗子（以下n，m均为正整数），从n个含有标有不同数字小球的袋子里，按顺序抽取n个小球，且抽取后不再放入袋子里。第一次抽的时候，有n种可能；第二次抽的时候有n - 1种可能，以此类推，抽完n个小球总共的不同排列个数为n!。 如果条件不变，只把抽取的小球个数改为m（m &lt;= n）个，结果也就变成：123n × (n - 1) × (n - 2) × ... × (n - m + 1)整理一下即：A(m, n) = n! / (n - m)! 组合同样是n个标记不同数字的小球放入一个袋子中，也是抽取m个，但是此时不算抽取的顺序。也就是把排列的结果n!/(n - m)!再除以m个小球随机排列的总方法术，即m!，所以结果为：1C(m, n) = A(m, n) / m! = n! / ( (n - m)! × m! ) 如何得出之前的公式运用以上的知识，可以总结出以下公式： 123C(m, n + m) = A(m, n + m) / m! = (n + m)! / ( n! × m! )]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>算法</tag>
        <tag>排列组合</tag>
        <tag>递归</tag>
      </tags>
  </entry>
</search>
